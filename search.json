[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Nous chargeons ici les packages utiles:\n\n\n\n Back to top"
  },
  {
    "objectID": "files.html",
    "href": "files.html",
    "title": "Files",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "components.html",
    "href": "components.html",
    "title": "ODE Model of Inflammatory Bowel Disease",
    "section": "",
    "text": "Figure 1\n\n\n\nDownload PDF file.\n\n\nFigure 1"
  },
  {
    "objectID": "components.html#original-paper",
    "href": "components.html#original-paper",
    "title": "ODE Model of Inflammatory Bowel Disease",
    "section": "",
    "text": "Figure 1\n\n\n\nDownload PDF file.\n\n\nFigure 1"
  },
  {
    "objectID": "components.html#species",
    "href": "components.html#species",
    "title": "ODE Model of Inflammatory Bowel Disease",
    "section": "Species",
    "text": "Species"
  },
  {
    "objectID": "codes/prcc.html",
    "href": "codes/prcc.html",
    "title": "prcc",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "PRCC"
    ]
  },
  {
    "objectID": "codes/patient_stratification.html",
    "href": "codes/patient_stratification.html",
    "title": "patient_stratification",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Patient Stratification"
    ]
  },
  {
    "objectID": "codes/steady_state.html",
    "href": "codes/steady_state.html",
    "title": "Steady-state computations",
    "section": "",
    "text": "The call to CoRC::runSteadyState() function (see ?@lst-steady-state) retrieves the steady-states of an ODE model as defined in Note 1.\n?@lst-import\n\nRun CoRC::loadModel() function to load the COPASI model in R1.\nWe ue the CoRC::runSteadyState function to run the steady-states…\n… and for this this, several algorithms can be chosen. We used in our framework the well-known root-finding Newton-Raphson algorithm.\n\n\n\n\n\n\n\nNote 1: Derive Steady-States Conditions of an ODE model\n\n\n\nComputing the steady-state conditions for an ordinary differential equation (ODE) means finding the system’s equilibrium points, where the variables (also named the species) remain constant over time. In other words, this means finding the concentrations for which all the derivatives cancel:\nGiven a system of \\(n=15\\) ODEs (number of varying species in the simulated model),\n\\[\n\\begin{cases}\n\\frac{dx_1}{dt} &= f_1(x_1, x_2, \\dots, x_{15}) \\\\\n\\frac{dx_2}{dt} &= f_2(x_1, x_2, \\dots, x_{15}) \\\\\n&\\vdots \\\\\n\\frac{dx_{15}}{dt} &= f_n(x_1, x_2, \\dots, x_{15})\n\\end{cases}\n\\]\nthe steady-state conditions are obtained by solving system Equation 1:\n\\[\n\\begin{cases}\nf_1(x_1^*, x_2^*, \\dots, x_{15}^*)& = 0 \\\\\nf_2(x_1^*, x_2^*, \\dots, x_{15}^*) &= 0 \\\\\n& \\vdots \\\\\nf_n(x_1^*, x_2^*, \\dots, x_{15}^*) &= 0.\n\\end{cases}\n\\tag{1}\\]\n\n\nTo ensure that the model converged, we assert in ?@lst-steady-state-convergence that the outcome of the stability analysis is found. Other outcomes include notFound and foundNegative (which is irrealistic in our setting, since concentrations of species can either be positive or null).",
    "crumbs": [
      "Steady State"
    ]
  },
  {
    "objectID": "codes/steady_state.html#run-steady-state-analyses",
    "href": "codes/steady_state.html#run-steady-state-analyses",
    "title": "Steady-state computations",
    "section": "",
    "text": "The call to CoRC::runSteadyState() function (see ?@lst-steady-state) retrieves the steady-states of an ODE model as defined in Note 1.\n?@lst-import\n\nRun CoRC::loadModel() function to load the COPASI model in R1.\nWe ue the CoRC::runSteadyState function to run the steady-states…\n… and for this this, several algorithms can be chosen. We used in our framework the well-known root-finding Newton-Raphson algorithm.\n\n\n\n\n\n\n\nNote 1: Derive Steady-States Conditions of an ODE model\n\n\n\nComputing the steady-state conditions for an ordinary differential equation (ODE) means finding the system’s equilibrium points, where the variables (also named the species) remain constant over time. In other words, this means finding the concentrations for which all the derivatives cancel:\nGiven a system of \\(n=15\\) ODEs (number of varying species in the simulated model),\n\\[\n\\begin{cases}\n\\frac{dx_1}{dt} &= f_1(x_1, x_2, \\dots, x_{15}) \\\\\n\\frac{dx_2}{dt} &= f_2(x_1, x_2, \\dots, x_{15}) \\\\\n&\\vdots \\\\\n\\frac{dx_{15}}{dt} &= f_n(x_1, x_2, \\dots, x_{15})\n\\end{cases}\n\\]\nthe steady-state conditions are obtained by solving system Equation 1:\n\\[\n\\begin{cases}\nf_1(x_1^*, x_2^*, \\dots, x_{15}^*)& = 0 \\\\\nf_2(x_1^*, x_2^*, \\dots, x_{15}^*) &= 0 \\\\\n& \\vdots \\\\\nf_n(x_1^*, x_2^*, \\dots, x_{15}^*) &= 0.\n\\end{cases}\n\\tag{1}\\]\n\n\nTo ensure that the model converged, we assert in ?@lst-steady-state-convergence that the outcome of the stability analysis is found. Other outcomes include notFound and foundNegative (which is irrealistic in our setting, since concentrations of species can either be positive or null).",
    "crumbs": [
      "Steady State"
    ]
  },
  {
    "objectID": "codes/steady_state.html#report-steady-state-analyses",
    "href": "codes/steady_state.html#report-steady-state-analyses",
    "title": "Steady-state computations",
    "section": "Report steady-state analyses",
    "text": "Report steady-state analyses\nIn ?@tbl-steady-state, we report the concentrations of the 15 varying species included in the Lo et al. (2016) ODE model describing the dynamic relations among pools of immune cells (macrophages and T-cells) and the secreted cytokines, using the flextable package (Gohel and Skintzos 2024).",
    "crumbs": [
      "Steady State"
    ]
  },
  {
    "objectID": "codes/steady_state.html#footnotes",
    "href": "codes/steady_state.html#footnotes",
    "title": "Steady-state computations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that models are loaded by reference with the CoRC package, meaning that you modify the object in place. Note that his behaviour is rather uncommon in R, the default being the Copy-on-Modify Behavior (aka by value).↩︎",
    "crumbs": [
      "Steady State"
    ]
  },
  {
    "objectID": "curation.html",
    "href": "curation.html",
    "title": "Curation",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "history.html",
    "href": "history.html",
    "title": "Curation",
    "section": "",
    "text": "Back to top"
  }
]